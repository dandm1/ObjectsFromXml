//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ChatClient.MessageServer {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Message", Namespace="http://schemas.datacontract.org/2004/07/ChatServer")]
    [System.SerializableAttribute()]
    public partial class Message : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ColourField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ContentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SenderField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime SentTimeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Colour {
            get {
                return this.ColourField;
            }
            set {
                if ((object.ReferenceEquals(this.ColourField, value) != true)) {
                    this.ColourField = value;
                    this.RaisePropertyChanged("Colour");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Content {
            get {
                return this.ContentField;
            }
            set {
                if ((object.ReferenceEquals(this.ContentField, value) != true)) {
                    this.ContentField = value;
                    this.RaisePropertyChanged("Content");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Sender {
            get {
                return this.SenderField;
            }
            set {
                if ((object.ReferenceEquals(this.SenderField, value) != true)) {
                    this.SenderField = value;
                    this.RaisePropertyChanged("Sender");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime SentTime {
            get {
                return this.SentTimeField;
            }
            set {
                if ((this.SentTimeField.Equals(value) != true)) {
                    this.SentTimeField = value;
                    this.RaisePropertyChanged("SentTime");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MessageServer.IChatServer", CallbackContract=typeof(ChatClient.MessageServer.IChatServerCallback))]
    public interface IChatServer {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatServer/ServerHeartbeat", ReplyAction="http://tempuri.org/IChatServer/ServerHeartbeatResponse")]
        bool ServerHeartbeat();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatServer/ServerHeartbeat", ReplyAction="http://tempuri.org/IChatServer/ServerHeartbeatResponse")]
        System.Threading.Tasks.Task<bool> ServerHeartbeatAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatServer/Subscribe", ReplyAction="http://tempuri.org/IChatServer/SubscribeResponse")]
        bool Subscribe();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatServer/Subscribe", ReplyAction="http://tempuri.org/IChatServer/SubscribeResponse")]
        System.Threading.Tasks.Task<bool> SubscribeAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatServer/Unsubscribe", ReplyAction="http://tempuri.org/IChatServer/UnsubscribeResponse")]
        bool Unsubscribe();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatServer/Unsubscribe", ReplyAction="http://tempuri.org/IChatServer/UnsubscribeResponse")]
        System.Threading.Tasks.Task<bool> UnsubscribeAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatServer/SendMessage", ReplyAction="http://tempuri.org/IChatServer/SendMessageResponse")]
        int SendMessage(ChatClient.MessageServer.Message value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatServer/SendMessage", ReplyAction="http://tempuri.org/IChatServer/SendMessageResponse")]
        System.Threading.Tasks.Task<int> SendMessageAsync(ChatClient.MessageServer.Message value);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IChatServerCallback {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatServer/ResendMessage", ReplyAction="http://tempuri.org/IChatServer/ResendMessageResponse")]
        int ResendMessage(ChatClient.MessageServer.Message value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatServer/ClientHeartbeat", ReplyAction="http://tempuri.org/IChatServer/ClientHeartbeatResponse")]
        bool ClientHeartbeat();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IChatServerChannel : ChatClient.MessageServer.IChatServer, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ChatServerClient : System.ServiceModel.DuplexClientBase<ChatClient.MessageServer.IChatServer>, ChatClient.MessageServer.IChatServer {
        
        public ChatServerClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public ChatServerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public ChatServerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ChatServerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ChatServerClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public bool ServerHeartbeat() {
            return base.Channel.ServerHeartbeat();
        }
        
        public System.Threading.Tasks.Task<bool> ServerHeartbeatAsync() {
            return base.Channel.ServerHeartbeatAsync();
        }
        
        public bool Subscribe() {
            return base.Channel.Subscribe();
        }
        
        public System.Threading.Tasks.Task<bool> SubscribeAsync() {
            return base.Channel.SubscribeAsync();
        }
        
        public bool Unsubscribe() {
            return base.Channel.Unsubscribe();
        }
        
        public System.Threading.Tasks.Task<bool> UnsubscribeAsync() {
            return base.Channel.UnsubscribeAsync();
        }
        
        public int SendMessage(ChatClient.MessageServer.Message value) {
            return base.Channel.SendMessage(value);
        }
        
        public System.Threading.Tasks.Task<int> SendMessageAsync(ChatClient.MessageServer.Message value) {
            return base.Channel.SendMessageAsync(value);
        }
    }
}
